)attr default(@+_)
   ~ type(text) intens(high) color(&clrh) hilite(&clrhr)
   _ type( input) intens(low ) just(left ) hilite(uscore) color(&clrw )
   ` type(text) intens(low ) caps(off) just(asis ) color(&clrt)
   + type(text) intens(high) caps(off) just(asis ) color(&clrt)
   @ type(text) intens(high) color(&clrw)
   ! type(output) intens(high) color(&clrw)
   $ type(output) caps(off) just(left ) color(&clrt)
   # area(SCRL) Extend(ON)
)Body Expand(\\)
@Tutorial -\-\(~PDSE V2 Member Generations@)\-\- Tutorial
@Command ===>_ZCMD                                                             +
#help -------------------------------------------------------------------------#
)Area Help
@ PDSEGEN Overview
`
` PDSEGEN is an ISPF dialog designed to enable the ISPF user to exploit
` the PDSE Member Generations capability that IBM introduced with z/OS 2.1
` with the introduction of PDSE Version 2 Libraries. This dialog uses only
` IBM documented interfaces and services to provide all of the functions
` that you will find when you use it.
`
@ Background
`
` IBM introduced PDSE Version 2 with z/OS 2.1 and included member
` generations as part of that release. With this the IBM ISPF product
` provided very basic access to member generations, leaving it up to
` others to provide the means to fully exploit them.
`
` PDSEGEN was developed to allow the author to work with PDSE member
` generations after seeing a SHARE presentation by IBM on the topic.
` This small project evolved into a tool for use by others as the
` benefit became very apparent. With the assistance and advice or
` several other ISPF experts around the country the tool has developed
` into what you are using today. It is released as open source under
` the GPL V3 license - which means it's free and all source is provided
` with the distribution.
`
@ What are Member Generations
`
` A Member Generation is to a PDS member what a Generation Data Set is to
` a dataset. When a PDSE is allocated it is the responsibility of the
` individual performing the allocation to define how many generations to
` allow, up to the installation defined maximum (use the Info command to
` view information about the active PDS/PDSE and included in that display
` will be the MaxGen for the current PDS/PDSE and the System MaxGen value.
`
` The original member will always be relative, and absolute, generation 0.
` Each time a member is updated (saved) a new generation is created
` (unless Save NoGen is used). The new generation will be the original
` member prior to the updates. As generations are created the absolute
` generation number will be incremented, up to the maximum value of
` 2,000,000,000, while the relative generation will decrement (from -1 to
` -nn, where nn is the installation MaxGens limit). Once the generations
` reach the installation limit, the oldest will be deleted.
`
` Be very aware that member generations are outstanding as they provide a
` way to find the last working member if changes are made that break
` something, BUT they are also useless outside of the PDSEGEN dialog for
` the simple reason that neither JCL or Dynamic Allocation can access
` them. If you want to work with a member generation then you have to copy
` it into a non-generation member.
`
@ Of Note
`
@ - Space Allocations
`
` Because a member can have multiple generations the space allocation
` for the PDSE needs to factor in that additional space.
`
@ - Backup, Copy, and Restore
`
` PDSEGEN fully supports making usable backup copies of any PDSE with
` member generations, something that IEBCOPY and a majority of other
` programs do not. The backup is a normal PDS without member generations
` that can then be copied or backed up using standard utilities. The
` Restore process converts the backup PDS into a PDSE with member
` generations restored. During the backup/restore process the relative
` generation number will be retained, unfortunately the absolute
` generation number will be lost (not that the absolute generation is all
` that useful).
`
@ - Compare
`
`  PDSEGEN also provides the ability to compare a generation to it's base
`  member, or to compare two different generations of a member.
`
@ More Information
`
` The included ISPF Tutorial covers all of the PDSEGEN dialog, including
` some functions that can be performed in Batch (i.e. Backup, Restore, and
` Copy).
`
)INIT
 .cursor = &zcmd
)PROC
 &ZUP = PDSEGH0
)END
/* Copyright (c) 2018 by Lionel B. Dyck */
/* GNU GENERAL PUBLIC LICENSE V3        */

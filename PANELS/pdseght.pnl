)attr default(@+_)
   ~ type(text) intens(high) color(&clrh) hilite(&clrhr)
 _ type( input) intens(low ) just(left ) hilite(uscore) color(&clrw )
 ` type(text) intens(low ) caps(off) just(asis ) color(&clrt)
   + type(text) intens(high) caps(off) just(asis ) color(&clrt)
   @ type(text) intens(high) color(&clrw)
   ! type(output) intens(high) color(&clrw)
   $ type(output) caps(off) just(left ) color(&clrt)
   # area(SCRL) Extend(ON)
)Body Expand(\\)
@Tutorial -\-\(~PDSE V2 Member Generations@)\-\- Tutorial
@Command ===>_ZCMD                                                             +
@
#help -------------------------------------------------------------------------#
)Area Help
`
@  Hints and Tips
`
`  1. Using Member Generations@will`increase the space requirements
`     for the PDSE (generations take space).
`  2. Use The Copy option to create a PDSE with member generations from
`     a non-generation enabled PDS.
`  3. Use Prune when you're happy with the current gen 0
`     a.  perhaps prune 1 or 2 so there is fallback but you don't need
`         all generations
`  4. Use Filter and/or Hide to limit the display of members to a
`     manageable number
`  5. Remember the generations are NOT accessible from JCL or Dynamic
`     Allocation which precludes 99% (99.999%) of all TSO commands,
`     CLISTs, REXX, and ISPF dialogs
`     a.  Use Promote or Recover to access the generations you need to
`         access
`  6. Use Backup (PDSEGBAK) to make a portable copy of your PDSE with
`     generations
`     a.  Use Restore (PDSEGRST) to restore the copy
`  7. You can Edit and change backup members
`     a.  This will change the contents of the generations and their
`         ISPF Stats
`     b.  Do so with CAUTION
`  6. The MOD column shows the number of records that were changed
`     (modified) when the member/generation was saved. This
`     information is only available when the member has both STATS and
`     NUMBERS enabled.
`  7. Create a portable copy (pdsegbak) for backup
`     and transfer to other locations then use pdsegbak
`     to restore
`  8. Change the maxgen value using pdsegenc (copy)
`     or pdsegbak (backup then restore)
`  9. A PDSE will retain member information so that if a member is
`     deleted and then later recreated then the generation count will
`     pick up from where it was. This information is retained in what IBM
`     refers to as 'dummy' members. These members cannot be processed
`     in anyway.
`
@  In the dialog/member list:
`
`  1. Find a string of text in all members and generations
`  2. Protection from editing a non-0 generation
`     a.  ISPF allows this (bozo no no)
`  3. Promote a non-0 generation to the base generation
`     a.  The base will become generation -1 so it isn't lost
`     b.  This allows it to be accessed using jcl, dynamic allocation,
`         or other dialogs
`  4. Recover a non-0 generation to a base (generation 0) member
`     a.  This allows it to be accessed using jcl, dynamic allocation,
`         or other dialogs
`  5. Compare a base generation (gen 0) to a non-0 generation member
`  6. Compare two non-0 generations
`  7. Delete an individual generation that you no longer want
`  8. Use the Prune command to clean up obsolete generations to
`     conserve space. Use FILTER to limit the members in the display
`     list as those are the only members Prune will operate on.
`     HINT: Do a Backup before using Prune (just in case)
`
)INIT
 .cursor = &zcmd
)PROC
 &ZUP = PDSEGH0
)END
/* Copyright (c) 2017 by Lionel B. Dyck */
/* GNU GENERAL PUBLIC LICENSE V3        */

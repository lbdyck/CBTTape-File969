/* this rexx exec is expected to be invoked by the EXEC command
   thus:

   EXec 'dsname($RECV)'

   Prompting will occur for hlq and optional volser.

   and it will then issue the TSO RECEIVE command for the
   the following members to create these new data sets:

   Member       Dataset
   ASM          hlq.ASM
   EXEC         hlq.EXEC
   LOAD         hlq.LOAD
   PANELS       hlq.PANELS
   SAMPLE       hlq.SAMPLE.PDS

   You will then need to copy these datasets/members into
   datasets for production use.

   During this process the PDSGENX will be updated with the
   hlq for the received datasets so it can be used for testing.

   After these data sets are created several of the members
   of this install data set will be browsed.
   */

  parse source x1 x2 x3 x4 dsn .
  x = PROMPT("ON") /* enable prompting */

 /* ----------------------------------------- *
 * Load and execute the CLS routine to clear *
 * the screen so the prompts are on the top  *
 * of the screen and easy to see.            *
 * ----------------------------------------- */
  "Loadgo '"dsn"(cls)' noterm"

  say "Enter desired hlq for target data sets",
    "(default is" sysvar("syspref")".PDSEGEN.NEW):"
  pull hlq
  hlq = strip(hlq)

  if hlq = "" then hlq = sysvar("syspref")".PDSEGEN.NEW"
  hlq = translate(hlq)

  say "Enter optional volser for target data sets",
    "default is to allow standard allocation to",
    "find a volume."
  pull volser
  volser = strip(volser)

  say "Enter optional SYSOUT class for RECEIVE messages," ,
      "a null SYSOUT class is recommended."
  pull sysout
  sysout = strip(sysout)
  if sysout <> "" then sys = "sysout("sysout")"
  else sys = ""

  if volser <> "" then vol = "vol("volser")"
  else vol = ""

  Say "Using HLQ:" hlq
  if vol <> "" then
  Say "Using Volser:" volser

/* ----------------------------------------------- *
 * Check for an ISPF environment and then check to *
 * see if the receive target datasets exist. If so *
 * then compress  them before the receive.         *
 * ----------------------------------------------- */
  if sysvar('sysispf') = "ACTIVE" then do
    Address ISPEXEC
    call do_comp   "'"hlq".asm'"
    call do_comp   "'"hlq".exec'"
    call do_comp   "'"hlq".load'"
    call do_comp   "'"hlq".panels'"
    Address TSO
  end

/* ------------------------------------------------------------ *
 * Process the TSO RECEIVE command on all the pertinent members *
 * ------------------------------------------------------------ */
  queue "dsn('"hlq".asm')" vol sys
  "Receive inds('"dsn"(asm)')"
  queue "dsn('"hlq".exec')" vol sys
  "Receive inds('"dsn"(exec)')"
  queue "dsn('"hlq".load')" vol sys
  "Receive inds('"dsn"(load)')"
  queue "dsn('"hlq".panels')" vol sys
  "Receive inds('"dsn"(panels)')"
  queue "dsn('"hlq".sample.pds')" vol sys
  "Receive inds('"dsn"(sample)')"

/* ----------------------------------------------------- *
 | Altlib to this PDS and invoke the fixpdseg edit macro |
 | to highlight the customization available in PDSEGEN   |
 |                                                       |
 | Invoke fixpdseg edit macro to update the assembler    |
 | JCL for the received datasets                         |
 * ----------------------------------------------------- */
  "altlib activate dataset('"dsn"') application(exec)"
  Address ISPExec
  "Edit Dataset('"hlq".exec("pdsegenx")') macro(fixpdseg)" ,
    'parm(hlq)'
  "Edit Dataset('"dsn"("asmjcl")') macro(fixpdseg)",
    'parm(hlq)'
  Address TSO
  'altlib deactivate application(exec)'

/* -------------------------------------------- *
 * If ISPF is active show key members in Browse *
 * -------------------------------------------- */
  if sysvar('sysispf') <> "ACTIVE" then exit
  Address ISPEXEC
  say 'Do you want to browse important documenation members' ,
    '- Y or N?'
  pull reply
  if left(reply,1) = 'Y' then do
    "Browse dataset('"dsn"($changes)')"
    "Browse dataset('"dsn"($install)')"
    "Browse dataset('"dsn"($$$doc)')"
    "Browse dataset('"dsn"($monitor)')"
    "Browse dataset('"dsn"(@backup)')"
    "Browse dataset('"dsn"(support)')"
    "Browse dataset('"dsn"(license)')"
  end
  "Edit dataset('"hlq".exec(pdsegens)')"

/* ------------------------------------------------- *
 * Now display a list of the received datasets using *
 * ISPF LMM services (ISPF 3.4)                      *
 * ------------------------------------------------- */
  Address ISPExec
  if vol <> "" then lmvol = "VOLUME("vol")"
  else lmvol = ""
  "LMDINIT LISTID(LISTID) LEVEL("hlq")" lmvol
  "LMDDISP LISTID("ListId") Confirm(Yes)",
    "View(Volume)"
  "LMDFREE LISTID("ListId")"

  Exit

Do_Comp: procedure
  arg compdsn
  if sysdsn(compdsn) /= 'OK' then return
  say "Compressing:"  compdsn
  "LMInit dataid(compress) enq(exclu) dataset("compdsn")"
  "LMComp Dataid("compress")"
  "LMFree Dataid("compress")"
  return
